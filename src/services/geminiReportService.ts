
import { supabase } from "@/integrations/supabase/client";
import { AuditResult } from "@/services/pdfAnalyzer";
import { ClientReport } from "@/types/client";
import { toast } from "sonner";
import { v4 as uuidv4 } from "uuid";

/**
 * Generate a report using the Gemini API
 * @param auditData The audit data to be processed
 * @param templateType The type of report template to use (seo, local, etc.)
 * @returns The generated report content
 */
export const generateGeminiReport = async (
  auditData: AuditResult, 
  templateType: 'seo' | 'local' | 'technical' | 'performance' = 'seo'
): Promise<string | null> => {
  try {
    console.log("Generating report with Gemini API");
    console.log("Template type:", templateType);
    
    // Call the Supabase Edge Function for Gemini
    const { data, error } = await supabase.functions.invoke('gemini-report', {
      body: {
        auditData,
        templateType
      }
    });
    
    if (error) {
      console.error("Error calling Gemini API:", error);
      throw new Error(`Error llamando a Gemini API: ${error.message}`);
    }
    
    if (!data || !data.content) {
      throw new Error("No se recibió contenido de la API de Gemini");
    }
    
    console.log("Report generated successfully");
    return data.content;
  } catch (error) {
    console.error("Error in generateGeminiReport:", error);
    toast.error("Error generando el informe con Gemini: " + 
      (error instanceof Error ? error.message : "Error desconocido"));
    return null;
  }
};

/**
 * Save a report generated by Gemini to the database
 * @param clientId The client ID
 * @param clientName The client name
 * @param reportContent The generated report content
 * @param auditData The audit data used to generate the report
 * @param documentIds Optional array of document IDs used in the report
 * @returns The saved report object
 */
export const saveGeminiReport = async (
  clientId: string,
  clientName: string,
  reportContent: string,
  auditData: AuditResult,
  documentIds: string[] = []
): Promise<ClientReport | null> => {
  try {
    const reportData = {
      id: uuidv4(),
      clientId,
      title: `Informe SEO - ${clientName} - ${new Date().toLocaleDateString('es-ES')}`,
      date: new Date().toISOString(),
      type: "seo",
      content: reportContent,
      analyticsData: {
        auditResult: auditData,
        generatedAt: new Date().toISOString(),
        generatedBy: "gemini"
      },
      documentIds: documentIds
    };
    
    // Save to database
    const { data, error } = await supabase
      .from('client_reports')
      .insert([{
        client_id: reportData.clientId,
        title: reportData.title,
        date: reportData.date,
        type: reportData.type,
        content: reportData.content,
        analytics_data: reportData.analyticsData,
        document_ids: reportData.documentIds
      }])
      .select()
      .single();
    
    if (error) {
      throw new Error(`Error guardando el informe: ${error.message}`);
    }
    
    // Map database response to ClientReport type
    return {
      id: data.id,
      clientId: data.client_id,
      title: data.title,
      date: data.date,
      type: data.type,
      content: data.content,
      analyticsData: data.analytics_data,
      documentIds: data.document_ids || [],
      url: data.url,
      notes: data.notes,
      shareToken: data.share_token,
      sharedAt: data.shared_at,
      includeInProposal: data.include_in_proposal || false
    };
  } catch (error) {
    console.error("Error in saveGeminiReport:", error);
    toast.error("Error guardando el informe: " + 
      (error instanceof Error ? error.message : "Error desconocido"));
    return null;
  }
};

/**
 * Generate a report using Gemini and save it to the database
 * @param clientId The client ID
 * @param clientName The client name
 * @param auditData The audit data to use for generation
 * @param documentIds Optional array of document IDs used in the report
 * @returns The saved report object
 */
export const generateAndSaveReport = async (
  clientId: string,
  clientName: string,
  auditData: AuditResult,
  documentIds: string[] = []
): Promise<ClientReport | null> => {
  try {
    toast.loading("Generando informe con IA...");
    
    // Determine the report type based on the audit data
    let reportType: 'seo' | 'local' | 'technical' | 'performance' = 'seo';
    if (auditData.localData && auditData.localData.businessName) {
      reportType = 'local';
    } else if (auditData.technicalResults && Object.keys(auditData.technicalResults).length > 0) {
      reportType = 'technical';
    } else if (auditData.performanceResults && Object.keys(auditData.performanceResults).length > 0) {
      reportType = 'performance';
    }
    
    // Generate the report content
    const reportContent = await generateGeminiReport(auditData, reportType);
    
    if (!reportContent) {
      toast.dismiss();
      toast.error("No se pudo generar el contenido del informe");
      return null;
    }
    
    // Save the report
    const savedReport = await saveGeminiReport(
      clientId,
      clientName,
      reportContent,
      auditData,
      documentIds
    );
    
    toast.dismiss();
    
    if (savedReport) {
      toast.success("Informe generado y guardado correctamente");
      return savedReport;
    } else {
      toast.error("Error guardando el informe");
      return null;
    }
  } catch (error) {
    toast.dismiss();
    console.error("Error in generateAndSaveReport:", error);
    toast.error("Error en el proceso de generación del informe: " + 
      (error instanceof Error ? error.message : "Error desconocido"));
    return null;
  }
};
